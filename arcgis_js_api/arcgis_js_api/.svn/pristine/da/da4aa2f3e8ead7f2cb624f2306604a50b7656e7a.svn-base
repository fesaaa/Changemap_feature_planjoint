<!DOCTYPE html>
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <meta name="viewport" content="initial-scale=1, maximum-scale=1,user-scalable=no">
  <title>Driving Directions</title>

  <link rel="stylesheet" href="http://js.arcgis.com/3.8/js/dojo/dijit/themes/claro/claro.css">
  <link rel="stylesheet" href="http://js.arcgis.com/3.8/js/dgrid/css/dgrid.css">
  <link rel="stylesheet" href="http://js.arcgis.com/3.8/js/esri/css/esri.css">
  <style>
    html,body {
      font-family: Arial,Helvetica,sans-serif;
      height:100%;
      margin:0;
    }
    #map {
      height:100%;
      overflow:hidden;
    }
    #dialog {
      top: 15px;
      right: 15px;
      position: absolute;
      padding: 5px;
      width: 300px;
      background-color:#ffffff;
      border-radius:5px;
      margin:8px;
      box-shadow:0px 5px 3px #888;
    }
    #dialog img, #dialog input{
      vertical-align:bottom;
    }
    #dialog input{
      margin:6px;
    }

    #grid{
      overflow-x:hidden;
      overflow-y:auto;

    }
    .dgrid-row{
      padding:5px;
      margin-bottom:5px;
      min-height:50px;
      border-bottom: solid 1px #C0C0C0;
    }
    .detail a{
      color:#000;
      text-decoration:none;
      cursor:pointer;
    }
    .detail a:hover{
      text-decoration:underline;
    }
    .distance{
      float:right;
      color:#C0C0C0;
      font-style:italic;
    }

  </style>
  <script>var dojoConfig = { parseOnLoad: true };</script>
  <script src="http://js.arcgis.com/3.8/"></script>
  <script>
    dojo.require("esri.map");
    dojo.require("esri.tasks.locator");
    dojo.require("esri.tasks.route");
    dojo.require("esri.utils");
    dojo.require("dojo.DeferredList");
    dojo.require("dgrid.Grid");

    var map, locator, routeTask, routeParams = [], segmentGraphic, directionFeatures, grid;

    function init() {
      dojo.connect(dojo.byId("directions"), "onclick", getDirections);
      
      //Set up the URL to the proxy page.
      esri.config.defaults.io.proxyUrl = "/proxy";
      
      //Create a map with an initial extent. Change the extent to match the area you would like to show.
      map = new esri.Map("map", {
        basemap: "streets",
        center: [-117.185, 34.065],
        zoom: 13
      });

      //Add a geocoding server as the locator. This locator will be used to find the origin and destination coordinates by input addresses.
      locator = new esri.tasks.Locator("http://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer");
      locator.outSpatialReference = map.spatialReference;
      
      //Fire errorHandler if the locator return en error.
      dojo.connect(locator, "onError", errorHandler);

      //Add a network analyst server with related parameters to execute the routing task.
      routeTask = new esri.tasks.RouteTask("http://tasks.arcgisonline.com/ArcGIS/rest/services/NetworkAnalysis/ESRI_Route_NA/NAServer/Route");
      routeParams = new esri.tasks.RouteParameters();
      routeParams.stops = new esri.tasks.FeatureSet();
      routeParams.returnRoutes = false;
      routeParams.returnDirections = true;
      routeParams.directionsLengthUnits = esri.Units.MILES;
      routeParams.outSpatialReference = new esri.SpatialReference({ wkid:102100 });

      //Show the route when the routing task is solved successfully, otherwise fire errorHandler.
      dojo.connect(routeTask, "onSolveComplete", showRoute);
      dojo.connect(routeTask, "onError", errorHandler);
      
    }
    dojo.ready(init);

    //Execute a routing task when clicking "get direction".
    function getDirections() {
      routeParams.stops.features = [];
      map.graphics.clear();

      //Get origin address.
      var optionsFrom = {
        address:{"SingleLine":dojo.byId("fromTxf").value},
        outFields:["Loc_name"]
      }
      var fromAddress = locator.addressToLocations(optionsFrom);
    
      //Get destination address.
      var optionsTo = {
        address:{"SingleLine":dojo.byId("toTxf").value},
        outFields:["Loc_name"],
      }
      var toAddress = locator.addressToLocations(optionsTo);

      //Create a deferred list with the dojo.deferred objects of fromAddress and toAddress, then find the route.
      var dList = new dojo.DeferredList([fromAddress,toAddress]);
      dList.then(configureRoute);
    }
    
    //Check if the origin and destination addresses are executed successfully
    //and solve the routing task.
    function configureRoute(results) {
      
      //Configure symbols to be used for destinations and route segments.
      var fromSymbol = new esri.symbol.PictureMarkerSymbol({
        "angle":0,
        "xoffset":0,
        "yoffset":10,
        "type":"esriPMS",
        "url":"http://static.arcgis.com/images/Symbols/Transportation/GreenSquareDaymark.png",
        "contentType":"image/png",
        "width":24,
        "height":24
      });
      var toSymbol = new esri.symbol.PictureMarkerSymbol({
        "angle":0,
        "xoffset":0,
        "yoffset":12,
        "type":"esriPMS",
        "url":"http://static.arcgis.com/images/Symbols/Transportation/RedSquareDaymark.png",
        "contentType":"image/png",
        "width":24,
        "height":24
      });
      
      var fromStop = getCandidate(results[0][1]);
      if (fromStop===null) {
        errorHandler("The origin address is invalid");
      } else {
        var fromGraphic = new esri.Graphic(fromStop.location, fromSymbol, { address:fromStop.address });
        routeParams.stops.features[0] = map.graphics.add(fromGraphic);
      };
      
      var toStop = getCandidate(results[1][1]);
      if (toStop===null) {
        errorHandler("The destination address is invalid");
      } else {
        var toGraphic = new esri.Graphic(toStop.location, toSymbol, { address:toStop.address });
        routeParams.stops.features[1] = map.graphics.add(toGraphic);
      };

      if (fromStop!==null && toStop!==null) {
        routeTask.solve(routeParams);
      }
    }
      
    //Handle all the coordinate candidates of the origin and destination addresses and
    //return the candidate with the highest score.
    function getCandidate(candidates){
      var stop = null, score = 0;
      dojo.forEach(candidates, function(candidate){
        if(candidate.score > score){
         stop = candidate;
         score = candidate.score;
        }
      });
      return stop;
    }

    //Show the result of the routing task.
    function showRoute(solveResult) {
      var data = [];
      if(grid) grid.refresh();
      
      var directions = solveResult.routeResults[0].directions;
      directionFeatures = directions.features;
      var routeSymbol = new esri.symbol.SimpleLineSymbol().setColor(new dojo.Color([0,0,255,0.5])).setWidth(4);
      
      //Add route to the map.
      var routeGraphic = new esri.Graphic(directions.mergedGeometry, routeSymbol); 
      map.graphics.add(routeGraphic);
      routeGraphic.getDojoShape().moveToBack();
      map.setExtent(directions.extent, true);
      
      //Display the directions.
      var directionsInfo = solveResult.routeResults[0].directions.features;
      var totalDistance = dojo.number.format(directions.totalLength);
      var totalLength = dojo.number.format(directions.totalTime);
      data = dojo.map(directionsInfo,function(feature,index){
        return {
          "detail": feature.attributes.text,
          "distance": dojo.number.format(feature.attributes.length,{places:2}),
          "index": index
        }
      });
      grid = new dgrid.Grid({
        renderRow:renderList,
        showHeader:false
      },"grid");
      grid.renderArray(data);
    }
    
    function renderList(obj,options){
      var template = "<div class='detail'><div style='max-width:70%;float:left;'><a  href='#' onclick='zoomToSegment(${index});'> ${detail}</a></div><span style='float:right;' class='distance'>${distance} mi</span></div>";       
      return dojo.create("div",{innerHTML:esri.substitute(obj,template)});
    }
    //Display any errors that were caught when attempting to solve the route.
    function errorHandler(err) {
      alert("An error occured\n" + err);
    }
    
    function zoomToSegment(index) {
      var segment = directionFeatures[index];
      var segmentSymbol = new esri.symbol.SimpleLineSymbol().setColor(new dojo.Color([255,0,0,0.5])).setWidth(8);

      map.setExtent(segment.geometry.getExtent(), true);
      if (! segmentGraphic) {
        segmentGraphic = map.graphics.add(new esri.Graphic(segment.geometry, segmentSymbol));
      } else {
        segmentGraphic.setGeometry(segment.geometry);
      }
    }    
  </script>
</head>
<body class="claro">
  <div id="map"></div>
  <div id="dialog">
    <div>
      <label for="fromTxf"><img src="http://static.arcgis.com/images/Symbols/Transportation/GreenSquareDaymark.png" width=24 height=24/></label>
      <input type="text" id="fromTxf" value="380 New York St, Redlands, CA 92373" size="36"/>
    </div>
    <div >
      <label for="toTxf"><img src="http://static.arcgis.com/images/Symbols/Transportation/RedSquareDaymark.png" width=24 height=24/></label>
      <input type="text" id="toTxf" value="1320 Mona Ave, Redlands, CA 92374" size="36"/>
    </div>
    <input id="directions" type="button" value="Get Directions" style="float:right;"/>
    <div id="directionsDetail" style="clear:both;" >
      <div id="grid"></div>
    </div>
  </div>
 
</body>
</html>
